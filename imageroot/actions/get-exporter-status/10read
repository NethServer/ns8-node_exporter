#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

#
# Read module status
#

import os
import sys
import json
import agent
import socket
import os.path
import subprocess

# Prepare return variable
status = {}

rdb = agent.redis_connect()
status["instance"] = os.environ["MODULE_ID"]
status["ui_name"] = rdb.get(f'module/{os.environ["MODULE_ID"]}/ui_name') or ""
status["node"] = rdb.hget(f'module/{os.environ["MODULE_ID"]}/environment', 'NODE_ID')
status["node_ui_name"] = rdb.get(f'node/{status["node"]}/ui_name') or ""

status["services"] = []
unit = os.path.basename(f'{os.environ["MODULE_ID"]}.service')
service = {"name": unit.removesuffix(".service")}
for a in ["active", "enabled", "failed"]:
    service[a] = subprocess.run(["systemctl", "-q", f"is-{a}", unit]).returncode == 0
status["services"].append(service)

status["images"] = []
try:
    images = subprocess.run(["podman", "image", "list", "node_exporter", "--format", "{{index .Names 0}},{{.Size}},{{.CreatedAt}}"], capture_output=True, text=True, check=True)
    for i in images.stdout.split("\n"):
        # skip empty lines
        if not i:
            continue
        info = i.split(",")
        status["images"].append({"name": info[0], "size": info[1], "created": info[2]})
except:
    pass

status['path'] = os.environ['NODE_EXPORTER_PATH']
status['fqdn'] = socket.getfqdn()

# Dump the result
json.dump(status, fp=sys.stdout)
